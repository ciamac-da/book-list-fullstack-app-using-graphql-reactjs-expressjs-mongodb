{"version":3,"sources":["queries/queries.js","components/BookDetails/BookDetails.js","components/BookList/BookList.js","components/AddBook/AddBook.js","containers/App.js","index.js"],"names":["getBooksQuery","gql","getAuthorsQuery","addBookMutation","getBookQuery","BookDetails","book","this","props","data","className","name","author","genre","books","map","item","id","console","log","displayBookDetails","Component","graphql","options","variables","bookId","BookList","state","selected","loading","onClick","e","setState","displayBooks","AddBook","authorId","disabled","authors","value","preventDefault","refetchQueries","query","onSubmit","submitForm","bind","required","placeholder","type","onChange","target","displayAuthors","src","compose","client","ApolloClient","uri","cache","InMemoryCache","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.10c3621f.chunk.js","sourcesContent":["import { gql } from \"graphql-tag\";\n\n\nconst getBooksQuery = gql`\n  {\n    books {\n      name\n      id\n    }\n  }\n`;\n\n\nconst getAuthorsQuery = gql`\n  {\n    authors {\n      name\n      id\n    }\n  }\n`;\n\n\nconst addBookMutation = gql`\n  mutation($name: String!, $genre: String!, $authorId: ID!) {\n    addBook(name: $name, genre: $genre, authorId: $authorId) {\n      name\n      id\n    }\n  }\n`;\n\n\nconst getBookQuery = gql`\n  query($id: ID!) {\n    book(id: $id) {\n      id\n      name\n      genre\n      author {\n        id\n        name\n        age\n        books {\n          name\n          id\n        }\n      }\n    }\n  }\n`;\n\nexport { getBooksQuery, getAuthorsQuery, addBookMutation, getBookQuery };\n","import React, { Component } from \"react\";\nimport { graphql } from \"@apollo/react-hoc\";\nimport { getBookQuery} from '../../queries/queries';\n\n\nclass BookDetails extends Component {\n    displayBookDetails(){\n        const {book} = this.props.data;\n        if(book){\n            return(\n                <div className=\"details\">\n                    <h2>{book.name}</h2>\n                    <h2 className=\"authorName\">Author : {book.author.name}</h2>\n                    <h3>Genre : {book.genre}</h3>\n                    <h3 className=\"allBooksText\">All Books by this author:</h3>\n                    <ul className=\"other-books\">\n                        {book.author.books.map(item=>{\n                            return <li key={item.id}>{item.name}</li>\n                        })}\n                    </ul>\n                </div>\n            )\n        }else{\n            return(\n                <div>No Book selected...</div>\n            )\n        }\n    }\n    render() {\n        console.log(this.props)\n      return (\n        <div id=\"book-details\">\n         {this.displayBookDetails()}\n        </div>\n      );\n    }\n  }\n\n  export default graphql(getBookQuery,{\n      options:(props)=>{\n          return{\n              variables:{\n                  id: props.bookId\n              }\n          }\n      }\n  })(BookDetails);","import React, { Component } from \"react\";\nimport { graphql } from \"@apollo/react-hoc\";\nimport { getBooksQuery} from '../../queries/queries';\nimport BookDetails from \"../BookDetails/BookDetails\";\n\n\nclass BookList extends Component {\n  constructor(props){\n    super(props)\n      this.state = {\n        selected: null\n    }\n  }\n  displayBooks() {\n    var data = this.props.data;\n    if (data.loading) {\n      return <div> Loading Books... </div>;\n    } else {\n      return data.books.map((book) => {\n        return <li key={book.id} onClick={(e)=> {this.setState({selected: book.id})}}> {book.name} </li>;\n      });\n    }\n  }\n  render() {\n    console.log(this.props);\n    return (\n      <div className=\"myList\">\n        <ul id=\"book-list\"> {this.displayBooks()} \n        <BookDetails bookId={this.state.selected}/> \n        </ul>{\" \"}\n      </div>\n    );\n  }\n}\n\nexport default graphql(getBooksQuery)(BookList);\n","import React, { Component } from \"react\";\nimport { graphql} from \"@apollo/react-hoc\";\nimport { getAuthorsQuery, addBookMutation, getBooksQuery} from '../../queries/queries';\nimport {flowRight as compose} from 'lodash';\n\nclass AddBook extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      name:'',\n      genre:'',\n      authorId:''\n    }\n  }\n  displayAuthors(){\n    var data = this.props.getAuthorsQuery;\n    if(data.loading){\n      return (<option disabled>Loading Authors...</option>)\n    }else{\n      return data.authors.map(author=>{\n        return(<option key={author.id} value={author.id}>{author.name}</option>)\n      })\n    }\n  }\n\n  submitForm(e){\n    e.preventDefault()\n    this.props.addBookMutation({\n      variables:{\n        name :    this.state.name,\n        genre:    this.state.genre,\n        authorId: this.state.authorId\n      },\n      refetchQueries: [{ query: getBooksQuery }]\n    });\n  }\n\n  render() {\n    return (\n      <form id=\"add-books\" onSubmit={this.submitForm.bind(this)}>\n        <div className=\"field\">\n          <label> Book Name  </label> \n          <input required placeholder=\"Enter a Book Name...\" type=\"text\" onChange={ (e) => this.setState({name: e.target.value}) } />\n        </div>\n\n        <div className=\"field\">\n          <label> Genre  </label> \n          <input required placeholder=\"Enter a Genre...\" type=\"text\" onChange={ (e) => this.setState({genre: e.target.value})} />\n        </div>\n\n        <div className=\"field\">\n          <label> Author </label>{\" \"}\n          <select onChange={ (e) => this.setState({authorId: e.target.value})} >\n            <option> Select Author </option>{\" \"}\n            {this.displayAuthors()}\n          </select>{\" \"}\n        <button>\n        +\n        &nbsp;\n        <img src=\"https://img.icons8.com/ios-filled/25/000000/add-book.png\"/> \n        </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default compose(\n  graphql(getAuthorsQuery,{name:\"getAuthorsQuery\"}),\n  graphql(addBookMutation,{name:\"addBookMutation\"})\n)\n(AddBook);\n","import React, { Component } from \"react\";\nimport { ApolloProvider, ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport BookList from \"../components/BookList/BookList\";\nimport AddBook from \"../components/AddBook/AddBook\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n  cache: new InMemoryCache(),\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n        <div className=\"myH1\">\n          <h1> Booklist Mern mini App using \n          React\n          <img src=\"https://img.icons8.com/officel/27/000000/react.png\"/> \n          &nbsp;\n          GraphQL\n          <img src=\"https://img.icons8.com/color/27/000000/graphql.png\"/>\n           &nbsp;\n           Express\n           <img src=\"https://img.icons8.com/pastel-glyph/25/000000/express-shopping--v1.png\"/>\n           &nbsp;\n          MongoDB \n          <img src=\"https://img.icons8.com/color/27/000000/mongodb.png\"/>   \n          </h1>\n        </div>\n          <BookList />\n          <AddBook />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\nReactDOM.render( < App / > , document.getElementById('root'));"],"sourceRoot":""}